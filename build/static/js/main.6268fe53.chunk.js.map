{"version":3,"sources":["../node_modules/cloudant/plugins sync /^/.*$","serviceWorker.js","data/student.js","redux/reducer.js","components/TutorialHeader/index.js","components/TutorialHeader/TutorialHeader.js","redux/action.js","content/LandingPage/LandingPage.js","content/LandingPage/index.js","content/RepoPage/index.js","content/RepoPage/RepoPage.js","content/LandingPage/LaborWeek.js","content/LandingPage/StudentForm.js","App.js","AppStore.js","data/config.js","index.js"],"names":["map","./cookieauth","./cookieauth.js","./default","./default.js","./promises","./promises.js","./retry","./retry.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","student","studentReducer","state","arguments","length","undefined","action","type","studentArray","newArray","slice","toConsumableArray","index","forEach","element","filter","_id","console","log","TutorialHeader","react_default","a","createElement","UIShell","aria-label","Link","to","prefix","_20_default","user_avatar_20_default","app_switcher_20_default","instance","axios","create","baseURL","timeout","headers","Authorization","Content-Type","Accept","LandingPage","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loading","setState","bind","assertThisInitialized","dispatch","post","JSON","stringify","selector","$gt","fields","then","response","data","docs","push","loadStudentList","catch","error","event","_this2","TableContainer","DataTable","Table","TableHead","TableRow","TableBody","TableCell","TableHeader","TableSelectAll","TableSelectRow","TableToolbar","Loading","active","rows","key","header","render","_ref","getHeaderProps","getSelectionProps","selectedRows","getBatchActionProps","title","row","cells","cell","react_router_dom","className","concat","value","Button","onClick","batchActionClick","Component","connect","RepoPage","LaborWeek","prevValue","sevenDayLabor","inputProps","allowEmpty","min","max","jsDate","Date","options","weekday","year","month","day","setDate","getDate","i","toLocaleDateString","NumberInput","assign","class","StudentForm","record","statusUpdated","handleSubmit","text","newTextInputValue","target","newRecord","name","dob","obj","params","now","objThis","_rev","rev","preventDefault","put","updateFormData","Form","onSubmit","Tag","TextInput","labelText","onChange","handleChangeName","placeholder","DatePicker","datePickerType","dateFormat","handleChangeDoB","DatePickerInput","LandingPage_LaborWeek","App","Fragment","components_TutorialHeader","react_router","exact","path","component","AppStore","cloudant","Cloudant","username","password","host","port","url","db","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","es","src_AppStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6268fe53.chunk.js","sourcesContent":["var map = {\n\t\"./cookieauth\": 211,\n\t\"./cookieauth.js\": 211,\n\t\"./default\": 212,\n\t\"./default.js\": 212,\n\t\"./promises\": 213,\n\t\"./promises.js\": 213,\n\t\"./retry\": 214,\n\t\"./retry.js\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 533;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const student = [];\n\nexport default student;\n","// ALL DATA updates must be done here, to trigger the \"state update\"\nimport student from '../data/student';\n\n// state is the data that's in redux store\n// action is what the \"action returned\"\n// see index.js createStore, this means that reducer.js is the \"rootReducer\"\n// all data updates here emit data state changes, which means it will re render if needed\nconst studentReducer = function student(state = student, action) {\n  switch (action.type) {\n    case 'GET_ALL_STUDENT':\n      if (action.studentArray) {\n        var newArray = action.studentArray.slice(0);\n        state = [...newArray];\n      }\n      break;\n    case 'REMOVE_STUDENT':\n      action.index.forEach(element => {\n        state = state.filter(student => student._id !== element.id); // only \"return\" that'snot \"selected\" / \"removed\"\n      });\n      break;\n    default:\n      console.log('defaulted');\n      break;\n  }\n  console.log(state);\n  return state;\n};\n\nexport default studentReducer;\n","import TutorialHeader from './TutorialHeader';\r\nexport default TutorialHeader;\r\n","import React from 'react';\r\nimport {\r\n  Header,\r\n  HeaderName,\r\n  HeaderNavigation,\r\n  HeaderMenuItem,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SkipToContent,\r\n} from 'carbon-components-react/lib/components/UIShell';\r\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\r\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\r\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TutorialHeader = () => (\r\n  <Header aria-label=\"Carbon Tutorial\">\r\n    <SkipToContent />\r\n    <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\r\n      Carbon Tutorial\r\n    </HeaderName>\r\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\r\n      <HeaderMenuItem element={Link} to=\"/repos\">\r\n        Repositories\r\n      </HeaderMenuItem>\r\n    </HeaderNavigation>\r\n    <HeaderGlobalBar>\r\n      <HeaderGlobalAction aria-label=\"Notifications\">\r\n        <Notification20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"User Avatar\">\r\n        <UserAvatar20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"App Switcher\">\r\n        <AppSwitcher20 />\r\n      </HeaderGlobalAction>\r\n    </HeaderGlobalBar>\r\n  </Header>\r\n);\r\n\r\nexport default TutorialHeader;\r\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL:\n    'https://701b5a20-b241-4286-b767-8173b8566bfd-bluemix.cloudant.com/mydb',\n  timeout: 10000,\n  headers: {\n    Authorization:\n      'Basic bXVuZGVwdGVyYmVhcmVueWJydWNoYXN0OmQwZmE2ODgxM2U2ZTAwYzlkMTJjOTcwMWIwNGVjNzg4MjVkZmQyZDM=',\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n  },\n});\n\nexport function getAxiosInstance() {\n  return instance;\n}\n\nexport function updateStudent(data) {\n  return instance\n    .put(`/${data._id}`, JSON.stringify(data))\n    .then(function(response) {\n      console.log('updateStudent');\n      console.log(response.data);\n      return response.data;\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n}\n\n// add return to the instance call to \"wait\"\nexport function getAllStudent() {\n  return dispatch => {\n    var data = {\n      selector: {\n        _id: { $gt: 0 }, // retrieve's all data\n      },\n      fields: ['_id', '_rev', 'name', 'dob', 'id'], // retrieves the \"columns\"\n    };\n    // forced to use \"post -> data search\", bec getAlldocs will only return \"all ids\"\n    return instance\n      .post('/_find', JSON.stringify(data))\n      .then(function(response) {\n        let student = [];\n        //student = [...response.data.docs];\n        //force to loop so we can plug id = _id\n        response.data.docs.forEach(element => {\n          element.id = element._id;\n          student.push(element);\n        });\n        // once we have all the data in the array \"student\", call the action \"loadStudentList\"\n        dispatch(loadStudentList(student));\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      });\n  };\n}\n\nexport function loadStudentList(student) {\n  // calling an action will automatically call \"reducer\"\n  return {\n    type: 'GET_ALL_STUDENT',\n    studentArray: student,\n  };\n}\n\nexport function removeStudent(studentIdArray) {\n  // calling an action will automatically call \"reducer\"\n  return {\n    type: 'REMOVE_STUDENT',\n    index: studentIdArray,\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as action from '../../redux/action';\nimport { Link } from 'react-router-dom';\nimport { DataTable } from 'carbon-components-react';\nimport { Button } from 'carbon-components-react';\nimport { Loading } from 'carbon-components-react';\n\n// this allows LandingPage component to have access to the redux store -> this.props.student\nfunction mapStateToProps(state) {\n  console.log(state);\n  return {\n    student: state,\n  };\n}\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { loading: true };\n    this.setState = this.setState.bind(this);\n  }\n\n  // calls this when a component \"mounts\"\n  componentDidMount() {\n    // calling an action will automatically call \"reducer\"\n    this.props.dispatch(action.getAllStudent());\n  }\n\n  // this holds the \"selected rows -id\"\n  batchActionClick(event) {\n    this.props.dispatch(action.removeStudent(event));\n  }\n\n  componentDidUpdate(event) {\n    if (this.props.student.length > 0) {\n      // if the student list is loaded\n      if (this.state.loading)\n        // add check so react won't infinitely call the componenetDidUpdate, this.setState triggers this function\n        this.setState({ loading: false }); // \"hide\" the loading component\n    }\n  }\n\n  render() {\n    const {\n      TableContainer,\n      Table,\n      TableHead,\n      TableRow,\n      TableBody,\n      TableCell,\n      TableHeader,\n      TableSelectAll,\n      TableSelectRow,\n      TableToolbar,\n    } = DataTable;\n\n    // We would have a headers array like the following\n    const headers = [\n      {\n        // `key` is the name of the field on the row object itself for the header\n        key: 'name',\n        // `header` will be the name you want rendered in the Table Header\n        header: 'Name',\n      },\n    ];\n\n    let arr = [];\n\n    return (\n      <div>\n        <Loading active={this.state.loading} />\n        <DataTable\n          rows={this.props.student}\n          headers={headers}\n          render={({\n            rows,\n            headers,\n            getHeaderProps,\n            getSelectionProps,\n            getBatchActionProps,\n            selectedRows,\n          }) => (\n            <TableContainer title=\"Student Record\">\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableSelectAll {...getSelectionProps()} />\n                    {headers.map(header => (\n                      <TableHeader {...getHeaderProps({ header })}>\n                        {header.header}\n                      </TableHeader>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map(row => (\n                    <TableRow key={row.id}>\n                      <TableSelectRow {...getSelectionProps({ row })} />\n                      {row.cells.map(cell => (\n                        <TableCell key={cell.id}>\n                          <Link className=\"bx--link\" to={`form/${row.id}`}>\n                            {cell.value}\n                          </Link>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              <TableToolbar>\n                <Button onClick={() => this.batchActionClick(selectedRows)}>\n                  Remove\n                </Button>\n              </TableToolbar>\n            </TableContainer>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\n// this allows LandingPage component to access the store in redux\nexport default connect(mapStateToProps)(LandingPage);\n","import LandingPage from './LandingPage';\r\nexport default LandingPage;\r\n","import RepoPage from './RepoPage';\r\nexport default RepoPage;\r\n","import React from 'react';\r\n\r\nconst RepoPage = () => {\r\n  return <div>REPO PAGE</div>;\r\n};\r\n\r\nexport default RepoPage;\r\n","import React, { Component } from 'react';\r\nimport { NumberInput } from 'carbon-components-react';\r\nimport { DataTable } from 'carbon-components-react';\r\n \r\nclass LaborWeek extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { LaborWeek:'' }\r\n        this.setState = this.setState.bind(this);\r\n    } \r\n\r\n    // if the props from the parent gets updated \r\n    // prevValue is the \"previousState\" -- this.props.LaborWeek is the \"updated value from the parent\"\r\n    // update the state data in this component\r\n    componentDidUpdate(prevValue){        \r\n        if (prevValue.LaborWeek !== this.props.LaborWeek)\r\n            this.setState({ LaborWeek : this.props.LaborWeek })\r\n    }\r\n\r\n    render(){\r\n        let sevenDayLabor=[];           \r\n        let rows = []\r\n        let headers = []\r\n        let inputProps = { className:'bx--number' , allowEmpty : false, min : 0, max : 16 }\r\n        /*let headers=[\r\n            {key: '0',header: 'Name'},\r\n            {key: 'protocol',header: 'Protocol'},\r\n            {key: 'port',header: 'Port'}          ]\r\n\r\n        \r\n        for (var i=0; this.state.LaborWeek && i < 7; i++){            \r\n            rows.push(<NumberInput {...inputProps} id={i}  label={jsDate.toLocaleDateString(\"en-US\",options)} />)\r\n            jsDate.setDate(jsDate.getDate()-1)\r\n        }        \r\n        sevenDayLabor.push(<DataTable rows={[...rows]} headers={[...headers]}></DataTable>)\r\n        */\r\n       var jsDate = new Date(this.state.LaborWeek)             \r\n       var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }\r\n\r\n       jsDate.setDate(jsDate.getDate()-6) \r\n       for (var i=0; this.state.LaborWeek && i < 7; i++){            \r\n         headers.push(<th>{jsDate.toLocaleDateString(\"en-US\",options)}</th>)\r\n         rows.push(<td><NumberInput {...inputProps} id={i}/></td>)\r\n         jsDate.setDate(jsDate.getDate()+1)\r\n       }       \r\n    \r\n        sevenDayLabor = (\r\n        <table class=\"bx--data-table \" >\r\n\t        <thead>\r\n\t\t        <tr>\r\n                    {headers}\r\n\t\t        </tr>\r\n\t        </thead>\r\n            <tbody>\r\n\t\t        <tr >\r\n\t\t\t       {rows}\r\n\t\t        </tr>\r\n\t        </tbody>\r\n        </table>\r\n        )\r\n        \r\n\r\n\r\n        return (\r\n            <div>\r\n            <div><h1>Labor Week - {this.state.LaborWeek}</h1></div>            \r\n            <div>{sevenDayLabor}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LaborWeek","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextInput } from 'carbon-components-react';\nimport { DatePicker } from 'carbon-components-react';\nimport { DatePickerInput } from 'carbon-components-react';\nimport { Button } from 'carbon-components-react';\nimport { Form } from 'carbon-components-react';\nimport { Tag } from 'carbon-components-react';\nimport * as action from '../../redux/action';\nimport LaborWeek from './LaborWeek';\n\n// this allows the component to have the access to the redux store -> this.props.student\nfunction mapStateToProps(state) {\n  return {\n    student: state,\n  };\n}\n\nclass StudentForm extends Component {\n  constructor() {\n    super();\n    // create a state inside the component, this will keep track of the form data\n    this.state = {\n      record: {},\n      statusUpdated: 'Student Record Loaded',\n    };\n    // bind \"this.state\" to this component's \"this component\" functions\n    this.setState = this.setState.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // react needs to handle events to monitor data changes -- for this case the field Name\n  handleChangeName(text) {\n    // this.target will hold the \"input text\"\n    let newTextInputValue = text.target.value;\n    let newRecord = this.state.record;\n    // update the state to the new value\n    newRecord.name = newTextInputValue;\n    this.setState({ record: newRecord });\n  }\n\n  // react needs to handle events to monitor data changes -- for this case the field Dob\n  handleChangeDoB(text) {\n    // \"text\" already holds the date value\n    let dob = text[0]; //-- looks like an array [Tue Sep 24 2019 00:00:00 GMT+0800 (Singapore Standard Time)]\n    let newRecord = this.state.record;\n    newRecord.dob = dob.toLocaleDateString(); // assumming it's a date, beautify the date\n    // update the state to the new value\n    this.setState({ record: newRecord });\n  }\n\n  componentDidMount() {\n    // retrieve the student array from the connected redux this.props.student, will return an array\n    let record = this.props.student.filter(obj => {\n      return obj._id === this.props.match.params.id;\n    })[0]; // get frst record only\n\n    // if null set today's date.\n    record.dob = record.dob\n      ? record.dob\n      : new Date(Date.now()).toLocaleDateString();\n\n    // set the initial data, this will allow react to 'handle' data changes\n    // set the initial state after the \"component form mounted\"\n    this.setState({ record: record });\n  }\n\n  updateFormData(objThis, data) {\n    console.log('updateFormData');\n    let newRecord = objThis.state.record;\n    newRecord._rev = data.rev; // update revision value\n    objThis.setState({\n      // set the state.record to the \"new record\"\n      record: newRecord,\n      statusUpdated: 'Record Successfully Updated',\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // we won't be reloading the page \"default will post the form and reload the page\"\n    console.log(this.state.record);\n    //console.log(this.props.match.params.id)\n    action\n      .updateStudent(this.state.record) // call this to update this.state.record\n      .then(this.updateFormData.bind(null, this)); // pass \"this\", so we can acccess setState\n  }\n\n  render() {\n    // see https://www.carbondesignsystem.com/components/overview for react-carbon-component\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Tag type={'green'}>{this.state.statusUpdated}</Tag>\n        {/* <label for=\"text-input-3\" class=\"bx--label\">Name</label>\n        <input\n          type=\"text\"\n          className=\"bx--text-input\"\n          id=\"1\"          \n          onChange={this.handleChangeText.bind(this)}\n          value={this.state.name}\n        /> */}\n        <TextInput\n          id=\"text\"\n          type=\"text\"\n          name=\"name\"\n          labelText=\"Name\"\n          onChange={this.handleChangeName.bind(this)}\n          placeholder={this.state.record.name}\n        />\n        <DatePicker\n          datePickerType=\"single\"\n          dateFormat={'m/d/Y'}\n          value={this.state.record.dob}\n          onChange={this.handleChangeDoB.bind(this)}>\n          <DatePickerInput id=\"dob\" labelText=\"dob\" />\n        </DatePicker>\n        <LaborWeek LaborWeek={this.state.record.dob} />\n        <Button className=\"bx--btn bx--btn--primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n\n  newMethod() {\n    return true;\n  }\n}\n\n// this allows LandingPage component to access the store in redux\nexport default connect(mapStateToProps)(StudentForm);\n","import React, { Component } from 'react';\nimport './app.scss';\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\nimport TutorialHeader from './components/TutorialHeader';\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\nimport RepoPage from './content/RepoPage';\nimport StudentForm from './content/LandingPage/StudentForm';\n\nclass App extends Component {\n  render() {\n    //console.log(this.props.student);   // this was passed via AppStore\n    return (\n      <>\n        <TutorialHeader />\n        <Content>\n          <Switch>\n            {/* if the url is the same as below, display component being mapped  */}\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route path=\"/repos\" component={RepoPage} />\n            {/* adding :id means that this \"value\" can be retrieved via params inside Form class  */}\n            <Route path=\"/form/:id\" component={StudentForm} />\n          </Switch>\n        </Content>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import App from './App';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n  return {\n    student: state,\n  };\n}\n\n// AppStore connects App and Redux data \"student\" or you can copy all of this to App -- LOL\nconst AppStore = connect(mapStateToProps)(App);\n\nexport default AppStore;\n","import Cloudant from 'cloudant';\n\nvar config = {\n  username: '701b5a20-b241-4286-b767-8173b8566bfd-bluemix',\n  password: '5b4d879c5c725d8c2e0639bc7af7ac19b6b7440e3a992f3bc87859e6f274b9ad',\n  host: '701b5a20-b241-4286-b767-8173b8566bfd-bluemix.cloudant.com',\n  port: 443,\n  url:\n    'https://701b5a20-b241-4286-b767-8173b8566bfd-bluemix:5b4d879c5c725d8c2e0639bc7af7ac19b6b7440e3a992f3bc87859e6f274b9ad@701b5a20-b241-4286-b767-8173b8566bfd-bluemix.cloudant.com',\n};\n\nvar cloudant = Cloudant(config);\nconsole.log(cloudant.db);\n\nexport { cloudant };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux'; // creates the \"store\" but using Redux, applyMiddleware is the bridge to action db\nimport rootReducer from './redux/reducer'; // \"updates\" the \"store\" to update \"state\"\nimport { Provider } from 'react-redux'; // provider to inject\nimport AppStore from './AppStore';\nimport thunk from 'redux-thunk'; // bridge the actions\nimport { cloudant } from './data/config';\n\n// applyMiddleware - creates connection between db actions and actions\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\n// we replaced App with AppStore since AppStore connectts \"App\" and \"store\" in redux\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      {' '}\n      <AppStore />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n/*\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n); */\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}